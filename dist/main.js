!(function (e) { const t = {}; function n(r) { if (t[r]) return t[r].exports; const o = t[r] = { i: r, l: !1, exports: {} }; return e[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports; }n.m = e, n.c = t, n.d = function (e, t, r) { n.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: r }); }, n.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }); }, n.t = function (e, t) { if (1 & t && (e = n(e)), 8 & t) return e; if (4 & t && typeof e === 'object' && e && e.__esModule) return e; const r = Object.create(null); if (n.r(r), Object.defineProperty(r, 'default', { enumerable: !0, value: e }), 2 & t && typeof e !== 'string') for (const o in e)n.d(r, o, ((t) => e[t]).bind(null, o)); return r; }, n.n = function (e) { const t = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return n.d(t, 'a', t), t; }, n.o = function (e, t) { return Object.prototype.hasOwnProperty.call(e, t); }, n.p = '', n(n.s = 4); }([function (e, t, n) { const r = n(1); let o = n(2); typeof (o = o.__esModule ? o.default : o) === 'string' && (o = [[e.i, o, '']]); const a = { insert: 'head', singleton: !1 }; const i = (r(o, a), o.locals ? o.locals : {}); e.exports = i; }, function (e, t, n) {
  let r; const o = function () { return void 0 === r && (r = Boolean(window && document && document.all && !window.atob)), r; }; const a = (function () { const e = {}; return function (t) { if (void 0 === e[t]) { let n = document.querySelector(t); if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) try { n = n.contentDocument.head; } catch (e) { n = null; }e[t] = n; } return e[t]; }; }()); const i = []; function c(e) { for (var t = -1, n = 0; n < i.length; n++) if (i[n].identifier === e) { t = n; break; } return t; } function u(e, t) { for (var n = {}, r = [], o = 0; o < e.length; o++) { const a = e[o]; const u = t.base ? a[0] + t.base : a[0]; const l = n[u] || 0; const s = ''.concat(u, ' ').concat(l); n[u] = l + 1; const f = c(s); const d = { css: a[1], media: a[2], sourceMap: a[3] }; f !== -1 ? (i[f].references++, i[f].updater(d)) : i.push({ identifier: s, updater: g(d, t), references: 1 }), r.push(s); } return r; } function l(e) { const t = document.createElement('style'); const r = e.attributes || {}; if (void 0 === r.nonce) { const o = n.nc; o && (r.nonce = o); } if (Object.keys(r).forEach(((e) => { t.setAttribute(e, r[e]); })), typeof e.insert === 'function')e.insert(t); else { const i = a(e.insert || 'head'); if (!i) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."); i.appendChild(t); } return t; } let s; const f = (s = [], function (e, t) { return s[e] = t, s.filter(Boolean).join('\n'); }); function d(e, t, n, r) { const o = n ? '' : r.media ? '@media '.concat(r.media, ' {').concat(r.css, '}') : r.css; if (e.styleSheet)e.styleSheet.cssText = f(t, o); else { const a = document.createTextNode(o); const i = e.childNodes; i[t] && e.removeChild(i[t]), i.length ? e.insertBefore(a, i[t]) : e.appendChild(a); } } function m(e, t, n) { let r = n.css; const o = n.media; const a = n.sourceMap; if (o ? e.setAttribute('media', o) : e.removeAttribute('media'), a && btoa && (r += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))), ' */')), e.styleSheet)e.styleSheet.cssText = r; else { for (;e.firstChild;)e.removeChild(e.firstChild); e.appendChild(document.createTextNode(r)); } } let y = null; let p = 0; function g(e, t) { let n; let r; let o; if (t.singleton) { const a = p++; n = y || (y = l(t)), r = d.bind(null, n, a, !1), o = d.bind(null, n, a, !0); } else n = l(t), r = m.bind(null, n, t), o = function () { !(function (e) { if (e.parentNode === null) return !1; e.parentNode.removeChild(e); }(n)); }; return r(e), function (t) { if (t) { if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return; r(e = t); } else o(); }; }e.exports = function (e, t) { (t = t || {}).singleton || typeof t.singleton === 'boolean' || (t.singleton = o()); let n = u(e = e || [], t); return function (e) { if (e = e || [], Object.prototype.toString.call(e) === '[object Array]') { for (let r = 0; r < n.length; r++) { const o = c(n[r]); i[o].references--; } for (var a = u(e, t), l = 0; l < n.length; l++) { const s = c(n[l]); i[s].references === 0 && (i[s].updater(), i.splice(s, 1)); }n = a; } }; };
}, function (e, t, n) { (t = n(3)(!1)).push([e.i, "body {\n    font-family: 'Fira Sans Extra Condensed', sans-serif;\n}\n\n#gameBoard td {\n    border: 2px solid;\n    height: 125px;\n    width: 125px;\n    text-align: center;\n    vertical-align: middle;\n    font-size: 40px;\n    cursor: pointer;\n    color: lightslategray;\n}", '']), e.exports = t; }, function (e, t, n) {
  e.exports = function (e) { const t = []; return t.toString = function () { return this.map(((t) => { const n = (function (e, t) { const n = e[1] || ''; const r = e[3]; if (!r) return n; if (t && typeof btoa === 'function') { const o = (i = r, c = btoa(unescape(encodeURIComponent(JSON.stringify(i)))), u = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(c), '/*# '.concat(u, ' */')); const a = r.sources.map(((e) => '/*# sourceURL='.concat(r.sourceRoot || '').concat(e, ' */'))); return [n].concat(a).concat([o]).join('\n'); } let i; let c; let u; return [n].join('\n'); }(t, e)); return t[2] ? '@media '.concat(t[2], ' {').concat(n, '}') : n; })).join(''); }, t.i = function (e, n, r) { typeof e === 'string' && (e = [[null, e, '']]); const o = {}; if (r) for (let a = 0; a < this.length; a++) { const i = this[a][0]; i != null && (o[i] = !0); } for (let c = 0; c < e.length; c++) { const u = [].concat(e[c]); r && o[u[0]] || (n && (u[2] ? u[2] = ''.concat(n, ' and ').concat(u[2]) : u[2] = n), t.push(u)); } }, t; };
}, function (e, t, n) {
  n.r(t), n.d(t, 'Controller', (() => x)), n.d(t, 'UIModule', (() => w)), n.d(t, 'Game', (() => h)); let r; let o; let a; let i; let c; let u; let l; let s; let f; let d; let m; let y; let p; let g; let v; const b = function () {
    const e = new Array(9).fill(null); const t = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 4, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [2, 4, 6]]; const n = function (n) { const r = (function (t) { const n = []; return e.forEach(((e, r) => { e === t && n.push(r); })), n; }(n)); return t.find(((e) => e.every(((e) => r.includes(e))))); }; return {
      getWinCombo: n, mark(t, n) { e[t] = n; }, isWon(e) { return !!n(e); }, isFull() { return !e.some(((e) => e === null)); }, isEmptyCell(t) { return !e[t]; },
    };
  }; var h = function () {
    for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; const r = function () { return t.reverse(); }; const o = function () { return t[0]; }; const a = function () { return t[1]; }; const i = b(); const c = function () { return i.isWon(o().getSymbol()) || i.isFull(); }; const u = function () { return i.isWon(o().getSymbol()) && t[0]; }; const l = function () { return i.getWinCombo(o().getSymbol()); }; const s = function (e) { const t = e.charAt(e.length - 1); if (i.isEmptyCell(t)) { const n = o().getSymbol(); return i.mark(t, n), { pos: e, symbol: n }; } }; return {
      switchPlayer: r, getActivePlayer: o, getNextPlayer: a, isGameOver: c, getWinner: u, turn: s, getWinCombo: l,
    };
  }; const S = function (e, t) {
    let n = 0; let r = e; return {
      getName() { return r; }, setName(e) { r = e; }, getSymbol() { return t; }, getScore() { return n; }, addScore() { n += 1; },
    };
  }; var w = (n(0), r = {
    startButton: '#btn-start', resetButton: '#btn-reset', board: '#gameBoard', allCells: '.cell', message: '#message-line', gameHelper: '#gameHelper',
  }, o = document.querySelector(r.startButton), a = document.getElementById('player1-input'), i = document.getElementById('player2-input'), c = document.querySelector('#player1-display'), u = document.querySelector('#player2-display'), l = document.querySelector('#player1-score'), s = document.querySelector('#player2-score'), {
    DOMSelectors: r, getDOMSelectors() { return r; }, getPlayersName(e) { switch (e) { case 'player1': return a; case 'player2': return i; default: return 'Anonymous'; } }, updatePlayersName() { c.innerText = a.value, u.innerText = i.value; }, updatePlayerScore(e) { e.getSymbol() === 'X' ? l.innerText = e.getScore() : s.innerText = e.getScore(); }, markPosition(e) { const t = e.pos; const n = e.symbol; document.querySelector('#'.concat(t)).innerText = n; }, showWinCombo(e) { e.forEach(((e) => { document.querySelector('#cell'.concat(e)).style.background = 'lightseagreen'; })); }, showMessage(e) { document.querySelector(r.message).innerText = e; }, updateStartButton() { const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ''; switch (e) { case 'start': o.innerText = 'Restart', o.className = 'btn btn-warning btn-lg btn-block'; break; case 'finish': o.innerText = 'Play Again!', o.className = 'btn btn-success btn-lg btn-block'; break; default: o.innerText = 'Start', o.className = 'btn btn-primary btn-lg btn-block'; } }, clearBoard() { document.querySelectorAll(r.allCells).forEach(((e) => { e.innerText = '', e.style.background = 'white'; })); },
  }); var x = (d = (f = w).getDOMSelectors(), m = S(f.getPlayersName('player1'), 'X'), y = S(f.getPlayersName('player2'), 'O'), p = !1, g = function () { window.location.reload(!0); }, v = function () { const e = f.getPlayersName('player1').value; const t = f.getPlayersName('player2').value; e !== 'Player1' && m.setName(e), t !== 'Player2' && y.setName(t), f.clearBoard(); const n = h(m, y); const r = document.querySelector(d.board); p ? (n.switchPlayer(), f.showMessage('Play Again! Now ~ '.concat(n.getActivePlayer().getName(), ' ~ First!!')), p = !1) : (f.showMessage('Game Started! ~ '.concat(n.getActivePlayer().getName(), ' ~, You First!')), p = !0), f.updateStartButton('start'), f.updatePlayersName(), r.addEventListener('click', (function e(t) { const o = t.target.id; const a = t.target.innerText; if (void 0 !== o && a === '') { f.showMessage(' ~ '.concat(n.getNextPlayer().getName(), ' ~, you are Next!!!')); const i = n.turn(o); if (void 0 !== i) { if (f.markPosition(i), n.isGameOver()) { const c = n.getWinner(); c ? (f.showWinCombo(n.getWinCombo()), c.addScore(), f.updatePlayerScore(c), f.showMessage('Congratulation! '.concat(c.getName(), ' won!'))) : f.showMessage('The Board is full, please try again!'), f.updateStartButton('finish'), r.removeEventListener('click', e); }n.switchPlayer(); } } })); }, { init() { document.querySelector(d.startButton).addEventListener('click', v), document.querySelector(d.resetButton).addEventListener('click', g); } }); document.addEventListener('DOMContentLoaded', (() => { x.init(); }));
}]));